#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <stdarg.h>
#include <stdbool.h>
#include "precomp.hpp"
#include "utils.hpp"
#include "grfmt_pxm.hpp"
#include <string>
#include <iostream>



typedef unsigned char   undefined;

//typedef unsigned char    bool;
typedef unsigned char    byte;
typedef unsigned char    dwfenc;
typedef unsigned int    dword;
typedef long long    longlong;
typedef unsigned long    qword;
typedef unsigned char    uchar;
typedef unsigned int    uint;
typedef unsigned long    ulong;
typedef unsigned long long    ulonglong;
typedef unsigned char    undefined1;
typedef unsigned short    undefined2;
typedef unsigned int    undefined4;
typedef unsigned long    undefined8;
typedef unsigned short    ushort;
typedef unsigned short    word;


void FUN_00191ce6(ulong param_1,uint *param_2,int param_3,int param_4,undefined2 *param_5,
                 int param_6,int param_7)

{
  ulong uVar1;
  undefined2 *local_38;
  ulong local_30;
  undefined2 *local_28;
  ulong local_20;
  
  if (param_7 == 0) {
    local_38 = param_5;
    local_30 = param_1;
    if (param_6 == 1) {
      while (local_30 < param_1 + (long)param_4) {
        *(undefined *)(local_38 + 1) = *(undefined *)(local_30 + param_2[3]);
        *(undefined *)((long)local_38 + 1) = *(undefined *)(local_38 + 1);
        *(undefined *)local_38 = *(undefined *)((long)local_38 + 1);
        local_38 = (undefined2 *)((long)local_38 + 3);
        local_30 = local_30 + (long)param_3;
      }
    }
    else {
      if (param_6 != 3) {
                    // WARNING: Subroutine does not return
        __assert_fail("0","/home/mantovan/Repositories/opencv/modules/imgcodecs/src/grfmt_pam.cpp",
                      0xbb,
                      "void basic_conversion(void*, const channel_layout*, int, int, void*, int, int)"
                     );
      }
      while (local_30 < param_1 + (long)param_4) {
        *(undefined *)local_38 = *(undefined *)(local_30 + param_2[2]);
        *(undefined *)((long)local_38 + 1) = *(undefined *)(local_30 + param_2[1]);
        *(undefined *)(local_38 + 1) = *(undefined *)(local_30 + *param_2);
        local_38 = (undefined2 *)((long)local_38 + 3);
        local_30 = local_30 + (long)param_3;
      }
    }
  }
  else {
    if (param_7 != 2) {
                    // WARNING: Subroutine does not return
      __assert_fail("0","/home/mantovan/Repositories/opencv/modules/imgcodecs/src/grfmt_pam.cpp",
                    0xd5,
                    "void basic_conversion(void*, const channel_layout*, int, int, void*, int, int)"
                   );
    }
    uVar1 = param_1 + (long)param_4 * 2;
    local_28 = param_5;
    local_20 = param_1;
    if (param_6 == 1) {
      while (local_20 < uVar1) {
        local_28[2] = *(undefined2 *)(local_20 + (ulong)param_2[3] * 2);
        local_28[1] = local_28[2];
        *local_28 = local_28[1];
        local_28 = local_28 + 3;
        local_20 = local_20 + (long)param_3 * 2;
      }
    }
    else {
      if (param_6 != 3) {
                    // WARNING: Subroutine does not return
        __assert_fail("0","/home/mantovan/Repositories/opencv/modules/imgcodecs/src/grfmt_pam.cpp",
                      0xd0,
                      "void basic_conversion(void*, const channel_layout*, int, int, void*, int, int)"
                     );
      }
      while (local_20 < uVar1) {
        *local_28 = *(undefined2 *)(local_20 + (ulong)param_2[2] * 2);
        local_28[1] = *(undefined2 *)(local_20 + (ulong)param_2[1] * 2);
        local_28[2] = *(undefined2 *)(local_20 + (ulong)*param_2 * 2);
        local_28 = local_28 + 3;
        local_20 = local_20 + (long)param_3 * 2;
      }
    }
  }
  return;
}



void FUN_001830ea(long param_1,undefined4 param_2,char param_3)

{
  byte bVar1;
  long lVar2;
  int iVar3;
  long lVar4;
  int local_10;

  iVar3 = 1 << ((byte)param_2 & 0x1f);
  if (param_3 == '\0') {
    bVar1 = 0;
  }
  else {
    bVar1 = 0xff;
  }
  local_10 = 0;
  while (local_10 < iVar3) {
    lVar4 = (long)local_10 * 4 + param_1;
    *(byte *)(lVar4 + 2) = (byte)((local_10 * 0xff) / (iVar3 + -1)) ^ bVar1;
    lVar2 = param_1 + (long)local_10 * 4;
    *(undefined *)(lVar2 + 1) = *(undefined *)(lVar4 + 2);
    *(undefined *)(param_1 + (long)local_10 * 4) = *(undefined *)(lVar2 + 1);
    *(undefined *)(param_1 + (long)local_10 * 4 + 3) = 0;
    local_10 = local_10 + 1;
  }
  return;
}


undefined * FUN_00183b06(undefined *param_1,byte *param_2,int param_3,undefined *param_4)

{
  undefined uVar1;
  undefined uVar2;
  byte bVar3;
  undefined uVar4;
  byte *local_30;
  undefined *local_28;
  uint local_10;
  
  uVar1 = *param_4;
  uVar2 = param_4[1];
  local_30 = param_2;
  local_28 = param_1;
  while (local_28 + 8 < param_1 + param_3) {
    bVar3 = *local_30;
    uVar4 = uVar1;
    if ((bVar3 & 0x80) != 0) {
      uVar4 = uVar2;
    }
    *local_28 = uVar4;
    uVar4 = uVar1;
    if ((bVar3 & 0x40) != 0) {
      uVar4 = uVar2;
    }
    local_28[1] = uVar4;
    uVar4 = uVar1;
    if ((bVar3 & 0x20) != 0) {
      uVar4 = uVar2;
    }
    local_28[2] = uVar4;
    uVar4 = uVar1;
    if ((bVar3 & 0x10) != 0) {
      uVar4 = uVar2;
    }
    local_28[3] = uVar4;
    uVar4 = uVar1;
    if ((bVar3 & 8) != 0) {
      uVar4 = uVar2;
    }
    local_28[4] = uVar4;
    uVar4 = uVar1;
    if ((bVar3 & 4) != 0) {
      uVar4 = uVar2;
    }
    local_28[5] = uVar4;
    uVar4 = uVar1;
    if ((bVar3 & 2) != 0) {
      uVar4 = uVar2;
    }
    local_28[6] = uVar4;
    uVar4 = uVar1;
    if ((bVar3 & 1) != 0) {
      uVar4 = uVar2;
    }
    local_28[7] = uVar4;
    local_30 = local_30 + 1;
    local_28 = local_28 + 8;
  }
  local_10 = (uint)*local_30;
  while (local_28 < param_1 + param_3) {
    uVar4 = uVar1;
    if ((local_10 & 0x80) != 0) {
      uVar4 = uVar2;
    }
    *local_28 = uVar4;
    local_28 = local_28 + 1;
    local_10 = local_10 << 1;
  }
  return local_28;
}


void FUN_00187760(long **param_1)

{
  if ((long **)*param_1 != param_1 + 2) {
    if (*param_1 != (long *)0x0) {
      delete *param_1;
    }
    *(long ***)param_1 = param_1 + 2;
    param_1[1] = (long *)0x408;
  }
  return;
}


void FUN_00187574(undefined8 param_1)

{
  FUN_00187760((long int**)param_1);
  return;
}

void FUN_00187590(void **param_1,void *param_2)

{
  int *pvVar1;

  if (param_1[1] < param_2) {
    FUN_00187760((long int**)param_1);
    param_1[1] = param_2;
    if ((void *)0x408 < param_2) {
      pvVar1 = new int(10);
      *param_1 = pvVar1;
    }
  }
  else {
    param_1[1] = param_2;
  }
  return;
}


undefined8 FUN_00191b10(void)

{
  return 0;
}


undefined8 FUN_0019e56c(long *param_1,void *param_2,int param_3)

{
  int local_14;

  if (param_3 < 0) {
                    // WARNING: Subroutine does not return
    __assert_fail("count >= 0",
                  "/home/mantovan/Repositories/opencv/modules/imgcodecs/src/bitstrm.cpp",0xe0,
                  "int cv::RLByteStream::getBytes(void*, int)");
  }
  if (0 < param_3) {
    while( true ) {
      local_14 = (int)param_1[3] - (int)param_1[4];
      if (param_3 < local_14) {
        local_14 = param_3;
      }
      if (0 < local_14) break;
      (**(void* (*)(long*))(*param_1))(param_1);
    }
                    // WARNING: Subroutine does not return
    memcpy(param_2,(void *)param_1[4],(long)local_14);
  }
  return 0;
}


void FUN_0019e286(long param_1,int param_2)

{
  int iVar1;
  char cVar2;


  if ((cVar2 != '\0') && (-1 < param_2)) {
    if (*(long *)(param_1 + 0x28) == 0) {
      *(long *)(param_1 + 0x20) = *(long *)(param_1 + 0x10) + (long)param_2;
      *(undefined4 *)(param_1 + 0x34) = 0;
    }
    else {
      iVar1 = param_2 % *(int *)(param_1 + 0x30);
      *(int *)(param_1 + 0x34) = param_2 - iVar1;
      *(long *)(param_1 + 0x20) = *(long *)(param_1 + 0x10) + (long)iVar1;
    }
    return;
  }
                    // WARNING: Subroutine does not return
  __assert_fail("isOpened() && pos >= 0",
                "/home/mantovan/Repositories/opencv/modules/imgcodecs/src/bitstrm.cpp",0xa8,
                "void cv::RBaseStream::setPos(int)");
}

ulong FUN_00185ac6(long param_1,cv::Mat *param_2)
{
  bool bVar1;
  bool bVar2;
  char cVar3;
  int iVar4;
  int iVar5;
  uint uVar6;
  ulong uVar7;
  byte *pbVar8;
  undefined8 uVar9;
  long lVar10;
  ulong uVar11;
  undefined8 *puVar12;
  long in_FS_OFFSET;
  byte bVar13;
  byte local_a02;
  int iStack2560;
  uint local_9fc;
  uint uStack2552;
  uint uStack2548;
  int iStack2544;
  int iStack2540;
  uint uStack2536;
  int iStack2532;
  uint local_9e0;
  int local_9dc;
  uint local_9d8;
  uint uStack2516;
  uint uStack2512;
  int iStack2508;
  int iStack2504;
  uint uStack2500;
  int iStack2496;
  uint uStack2492;
  uint uStack2488;
  uint uStack2484;
  byte *local_9b0;
  byte *pbStack2472;
  void *local_9a0;
  byte *local_998;
  byte *pbStack2448;
  std::string local_988;
  undefined4 auStack2416 [2];
  undefined local_968 [1056];
  undefined local_548 [1054];
  byte abStack298 [266];
  long local_20;
  
  bVar13 = 0;
  local_20 = *(long *)(in_FS_OFFSET + 0x28);
  local_9b0 = (byte *)param_2;
  uVar7 = (unsigned long)((cv::MatStep *)(param_2 + 0x48));
  bVar1 = 1 < iVar4;
  lVar10 = 0x20;
  puVar12 = (undefined8 *)(abStack298 + 2);
  while (lVar10 != 0) {
    lVar10 = lVar10 + -1;
    *puVar12 = 0;
    puVar12 = puVar12 + (ulong)bVar13 * 0x1ffffffffffffffe + 1;
  }
  local_a02 = 0;
  if (*(int *)(param_1 + 0x4e4) == 0xf) {
    iVar4 = 0x10;
  }
  else {
    iVar4 = *(int *)(param_1 + 0x4e4);
  }
  iVar4 = iVar4 * *(int *)(param_1 + 8);
  iVar5 = iVar4 + 7;
  if (iVar5 < 0) {
    iVar5 = iVar4 + 0xe;
  }
  local_9e0 = (iVar5 >> 3) + 3U & 0xfffffffc;
  if (bVar1) {
    local_9dc = 3;
  }
  else {
    local_9dc = 1;
  }
  local_9d8 = *(int *)(param_1 + 8) * local_9dc;
  if ((*(int *)(param_1 + 0x4e8) < 0) ) {
    bVar2 = true;
  }
  else {
    bVar2 = false;
  }
  if (bVar2) {
    uVar7 = 0;
  }
  else {
    if (*(int *)(param_1 + 0x4e0) == 1) {
      local_9b0 = local_9b0 + (long)(int)local_9fc * (long)(*(int *)(param_1 + 0xc) + -1);
      local_9fc = -local_9fc;
    }

    FUN_00187590((void**)local_968,(void*)(long)(int)(local_9e0 + 0x20));
    if (!bVar1) {
      if (*(int *)(param_1 + 0x4e4) < 9) {

      }
      lVar10 = (long)(*(int *)(param_1 + 8) * 3 + 0x20);
      FUN_00187590((void**)local_548,(void*)lVar10);
    }


    FUN_0019e286(param_1 + 0xa0,(int)(ulong)*(uint *)(param_1 + 0x4e8));
    switch(*(undefined4 *)(param_1 + 0x4e4)) {
    default:
      std::string("Invalid/unsupported mode");


      break;
    case 1:
      iStack2560 = 0;
      while (iStack2560 < *(int *)(param_1 + 0xc)) {
        FUN_0019e56c((long*)(param_1 + 0xa0),local_9a0,(ulong)local_9e0);
        pbVar8 = local_998;
        if (bVar1) {
          pbVar8 = local_9b0;
        }

        if (!bVar1) {


        }
        iStack2560 = iStack2560 + 1;
        local_9b0 = local_9b0 + (int)local_9fc;
      }
      local_a02 = 1;
      break;
    case 4:
      if (*(int *)(param_1 + 0x4ec) == 0) {
        iStack2560 = 0;
        while (iStack2560 < *(int *)(param_1 + 0xc)) {
          FUN_0019e56c((long*)(param_1 + 0xa0),local_9a0,(ulong)local_9e0);
          if (bVar1) {

          }
          else {

          }
          iStack2560 = iStack2560 + 1;
          local_9b0 = local_9b0 + (int)local_9fc;
        }
        local_a02 = 1;
      }
      else {
        if (*(int *)(param_1 + 0x4ec) == 2) {
          pbStack2472 = local_9b0 + (int)local_9d8;
          iStack2560 = 0;
          do {
            while( true ) {
              while( true ) {

                uStack2488 = uVar6 & 0xff;
                uStack2492 = (int)uVar6 >> 8;
                if (uStack2488 == 0) break;
                uStack2552 = 0;
                auStack2416[0] = *(undefined4 *)(param_1 + ((long)((int)uVar6 >> 0xc) + 0x38) * 4);
                auStack2416[1] =
                     *(undefined4 *)(param_1 + ((long)(int)(uStack2492 & 0xf) + 0x38) * 4);
                abStack298[0] = abStack298[(long)((int)uVar6 >> 0xc) + 2];
                abStack298[1] = abStack298[(long)(int)(uStack2492 & 0xf) + 2];
                pbStack2448 = local_9b0 + (int)(uStack2488 * local_9dc);
                if (pbStack2472 < pbStack2448) goto LAB_00186f4f;
                do {
                  if (bVar1) {
                    *local_9b0 = *(byte *)(auStack2416 + (int)uStack2552);
                    local_9b0[1] = *(byte *)((long)auStack2416 + (long)(int)uStack2552 * 4 + 1);
                    local_9b0[2] = *(byte *)((long)auStack2416 + (long)(int)uStack2552 * 4 + 2);
                  }
                  else {
                    *local_9b0 = abStack298[(int)uStack2552];
                  }
                  uStack2552 = uStack2552 ^ 1;
                  local_9b0 = local_9b0 + local_9dc;
                } while (local_9b0 < pbStack2448);
              }
              if ((int)uStack2492 < 3) break;
              if (pbStack2472 < local_9b0 + (int)(uStack2492 * local_9dc)) goto LAB_00186f4f;
              uStack2484 = ((int)(uStack2492 + 1) >> 1) + 1U & 0xfffffffe;


              if (uVar7 <= uVar11) {
                std::string("(size_t)sz < _src.size()");



                std::string(local_988);
              }
              FUN_0019e56c((long*)(param_1 + 0xa0),local_9a0,0);

            }
            uStack2548 = pbStack2472[0] - local_9b0[0];
            iStack2544 = *(int *)(param_1 + 0xc) - iStack2560;
            if (uStack2492 == 2) {

              uStack2548 = local_9dc * iVar4;

            }
            if (uStack2492 == 0) {
              uVar6 = 0;
            }
            else {
              uVar6 = 0xffffffff;
            }
            uStack2488 = uStack2548 + (uVar6 & iStack2544 * local_9d8);
            if (bVar1) {
           }
            else {
           }
          } while (iStack2560 < *(int *)(param_1 + 0xc));
          local_a02 = 1;
        }
      }
      break;
    case 8:
      if (*(int *)(param_1 + 0x4ec) == 0) {
        iStack2560 = 0;
        while (iStack2560 < *(int *)(param_1 + 0xc)) {
          FUN_0019e56c((long*)(param_1 + 0xa0),local_9a0,(ulong)local_9e0);
          if (bVar1) {

          }
          else {

          }
          iStack2560 = iStack2560 + 1;
          local_9b0 = local_9b0 + (int)local_9fc;
        }
        local_a02 = 1;
      }
      else {
        if (*(int *)(param_1 + 0x4ec) == 1) {
          pbStack2472 = local_9b0 + (int)local_9d8;
          iStack2540 = 0;
          iStack2560 = 0;
          do {
            while( true ) {

              uStack2512 = uStack2516 & 0xff;
              uStack2516 = (int)uStack2516 >> 8;
              if (uStack2512 != 0) break;
              if ((int)uStack2516 < 3) {
                uStack2536 = pbStack2472[0] - local_9b0[0];
                iStack2532 = *(int *)(param_1 + 0xc) - iStack2560;
                if (((uStack2516 != 0) || (iStack2540 == 0)) || ((int)uStack2536 < (int)local_9d8))
                {
                  if (uStack2516 == 2) {

                    uStack2536 = local_9dc * iVar4;

                  }
                  if (uStack2516 == 0) {
                    uVar6 = 0;
                  }
                  else {
                    uVar6 = 0xffffffff;
                  }
                  uStack2536 = uStack2536 + (iStack2532 * local_9d8 & uVar6);
                  if (*(int *)(param_1 + 0xc) <= iStack2560) goto code_r0x00186a72;
                  if (*(int *)(param_1 + 0xc) <= iStack2560) goto code_r0x00186a72;
                }
                iStack2540 = 0;
                if (*(int *)(param_1 + 0xc) <= iStack2560) goto code_r0x00186a72;
              }
              else {
                iStack2508 = iStack2560;
                iStack2504 = uStack2516 * local_9dc;
                if (pbStack2472 < local_9b0 + iStack2504) goto LAB_00186f4f;
                uStack2500 = uStack2516 + 1 & 0xfffffffe;


                if (uVar7 <= uVar11) {
                  std::string("(size_t)sz < _src.size()");
                 std::string(local_988);
                }
                FUN_0019e56c((long*)(param_1 + 0xa0),local_9a0,(ulong)uStack2500);
               iStack2540 = iStack2560 - iStack2508;
              }
            }
            iStack2496 = iStack2560;
            uStack2512 = uStack2512 * local_9dc;
            if (pbStack2472 < local_9b0 + (int)uStack2512) goto LAB_00186f4f;


            iStack2540 = iStack2560 - iStack2496;
          } while (iStack2560 < *(int *)(param_1 + 0xc));
code_r0x00186a72:
          local_a02 = 1;
        }
      }
      break;
    case 0xf:
      iStack2560 = 0;
      while (iStack2560 < *(int *)(param_1 + 0xc)) {
        FUN_0019e56c((long*)(param_1 + 0xa0),local_9a0,(ulong)local_9e0);
        if (bVar1) {


        }
        else {


        }
        iStack2560 = iStack2560 + 1;
        local_9b0 = local_9b0 + (int)local_9fc;
      }
      local_a02 = 1;
      break;
    case 0x10:
      iStack2560 = 0;
      while (iStack2560 < *(int *)(param_1 + 0xc)) {
        FUN_0019e56c((long*)(param_1 + 0xa0),local_9a0,(ulong)local_9e0);
        if (bVar1) {


        }
        else {


        }
        iStack2560 = iStack2560 + 1;
        local_9b0 = local_9b0 + (int)local_9fc;
      }
      local_a02 = 1;
      break;
    case 0x18:
      iStack2560 = 0;
      while (iStack2560 < *(int *)(param_1 + 0xc)) {
        FUN_0019e56c((long*)(param_1 + 0xa0),local_9a0,(ulong)local_9e0);
        if (bVar1) {
                    // WARNING: Subroutine does not return
          memcpy(local_9b0,local_9a0,(long)(*(int *)(param_1 + 8) * 3));
        }


        iStack2560 = iStack2560 + 1;
        local_9b0 = local_9b0 + (int)local_9fc;
      }
      local_a02 = 1;
      break;
    case 0x20:
      iStack2560 = 0;
      while (iStack2560 < *(int *)(param_1 + 0xc)) {
        FUN_0019e56c((long*)(param_1 + 0xa0),local_9a0,(ulong)local_9e0);
        if (bVar1) {

          if (iVar4 == 3) {


          }
          else {

            if (iVar4 == 4) {
                    // WARNING: Subroutine does not return
              memcpy(local_9b0,local_9a0,(long)(*(int *)(param_1 + 8) << 2));
            }
          }
        }
        else {


        }
        iStack2560 = iStack2560 + 1;
        local_9b0 = local_9b0 + (int)local_9fc;
      }
      local_a02 = 1;
    }
LAB_00186f4f:
    uVar7 = (ulong)local_a02;
    FUN_00187574((undefined8)local_548);
    FUN_00187574((undefined8)local_968);
  }
  if (local_20 != *(long *)(in_FS_OFFSET + 0x28)) {
                    // WARNING: Subroutine does not return

  }
  return uVar7;
}



